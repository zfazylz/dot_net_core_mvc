// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCShop.Models;

namespace PCShop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b => // Here using Identity library to implement Role
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex") // Index based role system
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles"); // Default Identity library table to save roles
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b => // User role entity
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId") // Role id
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PCShop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "CPU"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "GPU"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "RAM"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "ROM"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Cases"
                        });
                });

            modelBuilder.Entity("PCShop.Models.Hardware", b =>
                {
                    b.Property<int>("HardwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("HardwareId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Hardwares");

                    b.HasData(
                        new
                        {
                            HardwareId = 1,
                            CategoryId = 1,
                            Description = "Threads	- 20, CPU Series - Intel Core i9, Graphics integrated - no integerated GPU, CPU Cores - 10, CPU Speed - 3.70 GHz, L3 Cache - 19.25 MB",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\cpu1.jpg",
                            ImageUrl = "\\Images\\thumbnails\\cpu1.jpg",
                            IsInStock = true,
                            IsOnSale = true,
                            Name = "Intel Core i9-10900X Tray",
                            Price = 990m
                        },
                        new
                        {
                            HardwareId = 2,
                            CategoryId = 1,
                            Description = "High End Quad Core CPU, tray for Sockel 1150, 84 W TDP 4 Cores / 4 Threads, Intel® HD Graphics 4600 integrated Basistakt: 3.30 GHz, (up to 3.70 GHz) 6 MB L3 cache",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\cpu2.jpg",
                            ImageUrl = "\\Images\\thumbnails\\cpu2.jpg",
                            IsInStock = true,
                            IsOnSale = true,
                            Name = "Intel Core I5-4590 4 core",
                            Price = 450m
                        },
                        new
                        {
                            HardwareId = 3,
                            CategoryId = 1,
                            Description = "Enthusiast Quad Core CPU, Boxed (without heatsink) for Sockel 1151, 91 W TDP 4 Cores / 8 Threads, Intel® HD Graphics 530 integrated Basistakt: 4.00 GHz, (up to 4.20 GHz) 8 MB L3 cache, Unlocked multiplier",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\cpu3.jpg",
                            ImageUrl = "\\Images\\thumbnails\\cpu3.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "Intel Core i7-6700K",
                            Price = 630m
                        },
                        new
                        {
                            HardwareId = 4,
                            CategoryId = 2,
                            Description = "AMD Radeon™ RX 5700 XT 8.0 GB, 1840 MHz chip clock rate, 2035 MHz Boost, Connection via PCIe 4.0, Active Cooling (Tri-Slot), 2x HDMI, 2x DisplayPort, Crossfire",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\gpu1.jpg",
                            ImageUrl = "\\Images\\thumbnails\\gpu1.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "Radeon RX 5700 8.0 GB",
                            Price = 750m
                        },
                        new
                        {
                            HardwareId = 5,
                            CategoryId = 2,
                            Description = "NVIDIA® GeForce® RTX 2070 Super™ 8.0 GB, Overclocked, 1605 MHz chip clock rate, 1800 MHz Boost, Connection via 3.0, Active Cooling (Tri-Slot)",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\gpu2.jpg",
                            ImageUrl = "\\Images\\thumbnails\\gpu2.jpg",
                            IsInStock = true,
                            IsOnSale = true,
                            Name = "GeForce RTX 2070  8.0 GB",
                            Price = 860m
                        },
                        new
                        {
                            HardwareId = 6,
                            CategoryId = 2,
                            Description = "AMD Radeon™ RX 4000 XT 4.0 GB, Overclocked, 1605 MHz chip clock rate, 1905 MHz Boost, Connection via PCIe 4.0, Active Cooling (Dual-Slot) ",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\gpu3.jpg",
                            ImageUrl = "\\Images\\thumbnails\\gpu3.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "Radeon RX 4000 4.0 GB",
                            Price = 320m
                        },
                        new
                        {
                            HardwareId = 7,
                            CategoryId = 3,
                            Description = "16 GB RAM, 2x 8 GB Kit, DDR4, 3200 MHz (PC4-25600), DIMM 288 Pin, CL16",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\ram1.jpg",
                            ImageUrl = "\\Images\\thumbnails\\ram1.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "Crucial Black 16GB",
                            Price = 210m
                        },
                        new
                        {
                            HardwareId = 8,
                            CategoryId = 3,
                            Description = "16 GB RAM, 2x 8 GB Kit, DDR4, 3200 MHz (PC4-25600), DIMM 288 Pin, CL1616 GB RAM, 2x 8 GB Kit, DDR4, 3200 MHz (PC4-25600), DIMM 288 Pin, CL16",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\ram2.jpg",
                            ImageUrl = "\\Images\\thumbnails\\ram2.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "G.Skill Aegis 16GB",
                            Price = 150m
                        },
                        new
                        {
                            HardwareId = 9,
                            CategoryId = 3,
                            Description = "4 GB RAM, 2x 2 GB Kit, DDR3, 1333 MHz (PC3-10600), DIMM 240 Pin, CL9",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\ram3.jpg",
                            ImageUrl = "\\Images\\thumbnails\\ram3.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "Corsair XMS3 RAM 4GB",
                            Price = 110m
                        },
                        new
                        {
                            HardwareId = 10,
                            CategoryId = 4,
                            Description = "1.0 TB SSD, Connection via PCI Express x4 (NVMe), Form factor M.2 (2280), Write speed up to 3300 MB/s, up to 3500 MB/s",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\rom1.jpg",
                            ImageUrl = "\\Images\\thumbnails\\rom1.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "Samsung SSD 970 1TB",
                            Price = 420m
                        },
                        new
                        {
                            HardwareId = 11,
                            CategoryId = 4,
                            Description = "480 GB SSD, Connection via SATA3, Form factor 2.5, Installationa height 7 mm, Write speed up to 410 MB/s, upp to 500 MB/s",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\rom2.jpg",
                            ImageUrl = "\\Images\\thumbnails\\rom2.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "Intel SSD S3500 480GB",
                            Price = 375m
                        },
                        new
                        {
                            HardwareId = 12,
                            CategoryId = 4,
                            Description = "240 GB SSD, Connection via SATA3, Form factor 2.5, Installation height 7 mm, Write speed up to 450 MB/s, up to 520 MB/s",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\rom3.jpg",
                            ImageUrl = "\\Images\\thumbnails\\rom3.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "ADATA SU630 SDD 240GB",
                            Price = 230m
                        },
                        new
                        {
                            HardwareId = 13,
                            CategoryId = 5,
                            Description = "Midi-Tower (sound dampened), supports ATX, mATX Boards, Internal: 8x 2.5, 3x 3.5, External: 2x 5.25, 1x 140 mm fan, 1x 120 mm fan, 2x USB3.1 Gen 1",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\case1.jpg",
                            ImageUrl = "\\Images\\thumbnails\\case1.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "Pure Base 600 Midi-Tower",
                            Price = 110m
                        },
                        new
                        {
                            HardwareId = 14,
                            CategoryId = 5,
                            Description = "Mini ITX Gehäuse, supports mini-ITX Boards, Internal: 4x 2.5, 1x 3.5",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\case2.jpg",
                            ImageUrl = "\\Images\\thumbnails\\case2.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "Cooler Master Mastercase H100",
                            Price = 225m
                        },
                        new
                        {
                            HardwareId = 15,
                            CategoryId = 5,
                            Description = "Midi-Tower mit plasticfenster, supports ATX Boards, Internal: 3x 2.5, 2x 3.5, 2x 120 mm fan",
                            ImageThumbnailUrl = "\\Images\\thumbnails\\case3.jpg",
                            ImageUrl = "\\Images\\thumbnails\\case3.jpg",
                            IsInStock = true,
                            IsOnSale = false,
                            Name = "GIGABYTE GB-AC300G",
                            Price = 350m
                        });
                });

            // Database validations for all models. Each property has own validation 
            
            modelBuilder.Entity("PCShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName") // For example here validation for First Name
                        .IsRequired() // It is required property
                        .HasColumnType("nvarchar(25)") // String type
                        .HasMaxLength(25); // Max length 25

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PCShop.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("HardwareId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("HardwareId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("PCShop.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("HardwareId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("HardwareId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCShop.Models.Hardware", b =>
                {
                    b.HasOne("PCShop.Models.Category", "Category")
                        .WithMany("Hardwares")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCShop.Models.OrderDetail", b =>
                {
                    b.HasOne("PCShop.Models.Hardware", "Hardware")
                        .WithMany()
                        .HasForeignKey("HardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCShop.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("PCShop.Models.Hardware", "Hardware")
                        .WithMany()
                        .HasForeignKey("HardwareId");
                });
#pragma warning restore 612, 618
        }
    }
}
